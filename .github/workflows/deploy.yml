name: Deploy

on:
  push:
    branches:
      - "deploy"

jobs:
  image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - name: Push tagged image to AWS ECR repository
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --tag $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      username: ${{ steps.login-ecr.outputs.docker_username_public_ecr_aws }}
      password: ${{ steps.login-ecr.outputs.docker_password_public_ecr_aws }}

  deploy:
    runs-on: ubuntu-latest
    needs: image
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - name: Upload Lambda function from ECR image
        env:
          TAG: ${{ github.sha }}
          ROLE: ${{ secrets.AWS_ROLE_ARN }}
          SRC: ${{ secrets.AWS_SOURCE_BUCKET }}
          DST: ${{ secrets.AWS_DESTINATION_BUCKET}}
          REPO: ${{ secrets.AWS_ECR_REPOSITORY }}
          LAMBDA: ${{ secrets.AWS_LAMBDA_FUNCTION }}
          ECR: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if aws lambda get-function --function-name $LAMBDA > /dev/null 2>&1; then
            aws lambda update-function-code --publish \
              --function-name $LAMBDA --image-uri $ECR/$REPO:$TAG
          else
            aws lambda create-function --timeout 900 --package-type Image \
              --function-name $LAMBDA --role=$ROLE --code ImageUri=$ECR/$REPO:$TAG \
              --environment Variables="{AWS_SOURCE_BUCKET=$SRC,AWS_DESTINATION_BUCKET=$DST}"
          fi

  invoke:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Find the lambda function ARN
        id: lambda-arn
        run: |
          echo "::set-output name=arn::$(aws lambda get-function --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} --query 'Configuration.FunctionArn' --output text)"
      - name: Setup a CloudWatch rule to periodically invoke the lambda function
        env:
          ARN: ${{ steps.lambda-arn.outputs.arn }}
          LAMBDA: ${{ secrets.AWS_LAMBDA_FUNCTION }}
          RULE: ${{ secrets.AWS_LAMBDA_FUNCTION }}-invoke
        run: |
          if aws events describe-rule --name $RULE > /dev/null 2>&1; then
            aws events put-targets --rule $RULE --targets Id=1,Arn=$ARN
          else
            aws events put-rule --name $RULE --state ENABLED \
                                --schedule-expression "cron(0 0 * * ? *)" \
                                --description "Invoke $LAMBDA every day at midnight"
            aws events put-targets --rule $RULE --targets Id=1,Arn=$ARN
          fi

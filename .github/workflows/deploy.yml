name: Auto deploy to AWS lambda function

on:
  push:
    branches:
      - "deploy"

jobs:
  image:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - name: Push tagged image to AWS ECR repository
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --platform=linux/amd64 --tag $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      username: ${{ steps.login-ecr.outputs.docker_username_public_ecr_aws }}
      password: ${{ steps.login-ecr.outputs.docker_password_public_ecr_aws }}

  deploy:
    runs-on: ubuntu-latest
    needs: image
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Upload Lambda function from ECR image
        run: |
          aws lambda get-function --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }}
          if [ $? -eq 0 ]
          then
            aws lambda update-function-code --publish --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} --image-uri ${{ needs.image.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}
          else
            aws lambda create-function --package-type Image --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} --code ImageUri=${{ needs.image.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }} --role=${{ secrets.AWS_ROLE_ARN }}
          fi

name: Auto deploy to AWS lambda function

on:
  push:
    branches:
      - "deploy"

jobs:
  image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - name: Push tagged image to AWS ECR repository
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --tag $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      username: ${{ steps.login-ecr.outputs.docker_username_public_ecr_aws }}
      password: ${{ steps.login-ecr.outputs.docker_password_public_ecr_aws }}

  deploy:
    runs-on: ubuntu-latest
    needs: image
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Upload Lambda function from ECR image
        id: publish
        run: |
          if aws lambda get-function --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} > /dev/null 2>&1; then
            aws lambda update-function-configuration \
              --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} \
              --image-uri ${{ needs.image.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

            aws lambda update-function-code \
              --publish --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} \
              --image-uri ${{ needs.image.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}
          else
            aws lambda create-function \
              --timeout 900 --package-type Image \
              --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} --role=${{ secrets.AWS_ROLE_ARN }} \
              --code ImageUri=${{ needs.image.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }} \
              --environment Variables={AWS_SOURCE_BUCKET=${{ secrets.AWS_SOURCE_BUCKET }},AWS_DESTINATION_BUCKET=${{ secrets.AWS_DESTINATION_BUCKET}}}
          fi

          echo "::set-output name=lambda-arn::$(aws lambda get-function --function-name ${{ secrets.AWS_LAMBDA_FUNCTION }} --query 'Configuration.FunctionArn' --output text)"

  invoke:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup a CloudWatch rule to periodically invoke the lambda function
        run: |
          if aws events describe-rule --name ${{ secrets.AWS_LAMBDA_FUNCTION }}-invoke > /dev/null 2>&1; then
            aws events put-targets --rule ${{ secrets.AWS_LAMBDA_FUNCTION }}-invoke \
                                   --targets Id=1,Arn=${{ needs.deploy.outputs.lambda-arn}}
          else
            aws events put-rule --description "Invoke ${{ secrets.AWS_LAMBDA_FUNCTION }} every day at midnight" \
                                --name ${{ secrets.AWS_LAMBDA_FUNCTION }}-invoke \
                                --target ${{ needs.deploy.outputs.lambda-arn}} \
                                --schedule-expression "cron(0 0 * * ? *)" \
                                --state ENABLED
          fi
